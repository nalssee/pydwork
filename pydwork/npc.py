"""Concurrency and parallelism patterns
"""

import multiprocessing as mp
import threading as th

from queue import Queue
from .util import nchunks, random_string


__all__ = ['npc', 'make_producers']


def npc(producers, consumer, parallel=False, max_qsize=100):
    """N producers and 1 consumer.

    Args:
        producers (List[iter]): equal to the number of workers,
                                threads or processes spawned
        consumer (FN): consumer takes a value generated by producers
                       consumer works in the main thread(or process)
        parallel (bool)
        max_qsize (int): max queue size
    """
    # No idea why but sending object() to a queue causes unexpected result.
    # I suspect pickle fails to properly encode it
    sentinel = random_string() if parallel else object()
    que = mp.Queue(max_qsize) if parallel else Queue(max_qsize)
    worker = mp.Process if parallel else th.Thread
    n_producers = len(producers)

    def insert(producer):
        try:
            for x in producer:
                que.put(x)
        finally:
            que.put(sentinel)

    ws = []
    for producer in producers:
        w = worker(target=insert, args=(producer,))
        w.daemon = True
        ws.append(w)
        w.start()

    sentinel_counter = 0
    while True:
        val = que.get()
        if val == sentinel:
            sentinel_counter += 1
            if sentinel_counter == n_producers:
                break
        else:
            consumer(val)

    for w in ws:
        w.join()


def make_producers(fn, xs, n):
    """Returns a list of producers

    Args:
        fn (FN[type -> type]) : one arg function
        xs (List[type])
        n (int): number of producers
    Returns:
        List[iter]
    """
    producers = []
    for chunk in nchunks(xs, n):
        producers.append(fn(x) for x in chunk)
    return producers
